#///////////////////////////////////////////////////////////////////////////////////
#//
#// Copyright (C) 2008 Jamal M. Natour
#//
#// This file is part of the OmegaOnline  package.
#//
#// It is free software: you can redistribute it and/or modify
#// it under the terms of the GNU Lesser General Public License as published by
#// the Free Software Foundation, either version 3 of the License, or
#// (at your option) any later version.
#//
#// OmegaOnline is distributed in the hope that it will be useful,
#// but WITHOUT ANY WARRANTY; without even the implied warranty of
#// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#// GNU Lesser General Public License for more details.
#//
#// You should have received a copy of the GNU Lesser General Public License
#// along with this file.  If not, see <http://www.gnu.org/licenses/>.
#//
#///////////////////////////////////////////////////////////////////////////////////

[Prerequisite Tools]	
	In order to build Omega from source, you will need several tools installed on your system.
	    C++ compiler ( i.e. GCC),
    	    Make tool ( i.e. GNU Make),
	    GNU automake
	    GNU autoconf
	    POSIX compliant shell (i.e. bash)

[Building Omega]
    You need to be in the project root, i.e. where you checked out the code i.e. "~/OmegaV-0.4.2/".
	Autoconf way
	------------
	1) scripts/autogen.sh -  this will generate a configure script
	2) ./configure  -  this will set up path to your system's build tools and generate a makefile
	3) make         -  this will build omega's modules
	4) sudo make install -  will install omega using super user powers

	Alternative method for building everything
	------------------- 
	1) . scripts/omega_env.sh - set up environment for build_omega.sh
	2) scripts/build_omega.sh all	  - generate and run a configure script then build everything
	3) scripts/build_omega.sh install - install everything

        There are some more commands that build_omega.sh supports, see [MISC] for more details.

[Omega Build System]
	The autoconf method is a wrapper for the second method and should be used
	when installing the software or when packaging e.g. for a Linux distribution.
	
	The alternative method is more useful for developers and allows more flexibility
	of use than the makefile, however the results are the same in both cases.

[Build System Overview]
	
	The Omega Build System (OBS) is made up of several makefiles and scripts.

	checkout/configure.ac		-  generates master makefile which calls build_omega.sh correctly.
	checkout/Makefile.in		-  template master makefiles filled in by configure.
	checkout/scripts/build_omega.sh -  shell script which calls make in a appropriately configured sub shell.
	
	checkout/makefiles/OOCore.mk	-  lists srcs and dependencies for OOCore - the underlying Omega Library.
	checkout/makefiles/OOServer.mk  -  lists srcs and dependencies for OOServer - the  Omega Daemon process.
	checkout/makefiles/OOSvrUsr.mk  -  lists srcs and dependencies for OOSvrUser - the  Omega sandbox process.

	makefiles/gnuMake/:
		makefile.env		-  defines all the defaults for build tools/paths
		makefile.targets	-  includes the following makefiles in the correct order for substitution
					-  	including all the targets under makefiles/gnuMake/targets:
		funcs.mk		-  useful functions called by depend also home for all functions
		install_paths.mk	-  exports install paths used by rest of build (needs tying to configure)
		pattern_rules.mk	-  defines the pattern rules so we can have release/debug builds
		use_flags.mk		-  defines commonly used linker flags
		vpath.mk		-  defines virtual paths rules so we can have release/debug builds
	build/configured_vars.mk	-  all the autoconfigured stuff [generated file]
		
	makefiles/gnuMake/build_class:	-  This directory contains all supported build profiles
		app.mk			-  builds one application target from one set of sources
		lib.mk			-  builds one lib from one set of sources
		
	makefiles/gnuMake/targets:	- This directory contains all the targets an omega makefile supports
		build.mk		- uses the selected build_class to build a target
		clean.mk		- removes the objects for this target, also contains distclean 
		depends.mk		- generate dependencies for project
		install.mk		- install correctly according to build_class
		phony.mk		- fake target to allow forced remakes
		test.mk			- builds test code according to build_class
		uninstall.mk		- uninstall correctly according to build_class
    
        autogen.sh create the build directory if needed and generate  build/configured_vars.mk.in with 
        all the variables to configure included in their unexpanded form.
        
        ./configure will 
            1) process build/configured_vars.mk.in to produce build/configured_vars.mk . 
            2) process Makefile.in to produce a generic makefile which calls a specfic makefile under
               the makefiles directory.
               
        To make this clearer, the following table shows what files are produced
        
        
         Running            || Produces 
         -------------------------------------------------------------------------
         scripts/autogen.sh -> build/configured_vars.mk.in
         -------------------------------------------------------------------------
         ./configure        -> build/configured_vars.mk with exported ENV_DIR variable
                            -> Makefile  
         -------------------------------------------------------------------------
          make              -> libOOCore.so
                            -> OOServerd
                            -> OOSvrUser
         -------------------------------------------------------------------------
         
         Running make will recursively build Omega, refer to the following
         table for more details of the actual makefiles used.

         Running      || Invokes                     || Producing
         -------------------------------------------------------------------------
          make        -> makefiles/OOCore.mk         || build/Debug/libOOCored.so
                      -> makefiles/OOServer.mk       || build/Debug/OOServerd
                      -> makefiles/OOSvrUsr.mk       || build/Debug/OOSvrUser
         -------------------------------------------------------------------------
[MISC]

Usage: build_omega.sh  [Options] Target [Subtargets]
[ Targets ]
	clean     remove *all* autogenerated files.
	oocore    build the core. [ Has Subtargets ]
	ooserver     build the server.[ Has Subtargets ]
	oouser     build the server user.[ Has Subtargets ]
	regen     regenerate the configure script.
	all      clean everything, regen everything finally build everything
	conf     configure Omega for your system.
[ Option ]
	--verbose (-v)
	--release (-r)
	[-vr|-rv] selects both verbose and release

[ Subtargets]
	clean	clean the subproject
	build	build the subproject
	install	clean the subproject
	depend	install the subproject
	test	build tests for subproject
	run-test	run tests for subproject
