# Generic Makefile for applications that link against libOOCore(d).so
TARGET 		:= # Output Binary Name
SRC_DIR 	:= # Source directory relative to trunk
INSTALL_DIR 	:= # Directory to install binarys

CC 		:= @g++
INSTALL 	:= @install -m
ECHO		:= @echo -e

# having a different OBJ_DIR to SRC_DIR breaks the autogenerated dependencies list 
OBJ_DIR 	:= $(SRC_DIR)/objs# object live here
BUILD_DIR 	:= bin
INSTALL_PERM 	:= 755 # rwxr-xr-x
DEPS 		:= $(SRC_DIR)/.depend# dependencies live here

# build with these flags, only add common libs here
LDFLAGS 	:= 
INCLUDES 	:= -I include/ -I include/OOCore -I include/OTL# search for headers here
CFLAGS 		:= -Wall -fno-rtti -Wno-non-virtual-dtor -pthread -fvisibility=hidden $(INCLUDES)
CXXFLAGS 	:= $(CFLAGS)

# the much requested debug build option
ifndef RELEASE
CFLAGS 		:= -g -O0 -DOMEGA_DEBUG $(CFLAGS)
BUILD_DIR 	:= $(BUILD_DIR)/Debug
LDFLAGS		:= $(LDFLAGS) -lOOCored
DEPS		:= $(DEPS)_release
OBJ_DIR 	:= $(OBJ_DIR)_debug
else 
CFLAGS 		:= -O2 $(CFLAGS)
LDFLAGS		:= $(LDFLAGS) -lOOCore
DEPS		:= $(DEPS)_debug
OBJ_DIR 	:= $(OBJ_DIR)_debug
endif

# our sources
SRCS 		:= $(SRC_DIR)/xx.cpp
# our object files
OBJS 		:= $(OBJ_DIR)/xx.o

# DEFAULT TARGET
# 1) force generation of dependency listing
# 2) compile precompiled header
# 3) compile sources
# 4) link objects to produces console tools
build: $(BUILD_DIR)/$(TARGET)

# FULL TARGET
# 1) remove dependency listing, object files, target
# 2) execute DEFAULT target
full:clean depend build

# SERVER TARGET
# 1) link object files to produce console tools
$(BUILD_DIR)/$(TARGET): $(OBJS)
	$(ECHO) "linking console tools $(BUILD_DIR)/$(TARGET)"
	@[ -d $(BUILD_DIR) ] || mkdir $(BUILD_DIR) && echo "created $(BUILD_DIR)"
	$(CC) $(OBJS) $(LDFLAGS) $(CFLAGS) -o $(BUILD_DIR)/$(TARGET) 

# CLEAN TARGET
# 1) remove dependency listing, object files, target
clean:
	$(ECHO) "cleaning project"
	@rm -f $(BUILD_DIR)/$(TARGET) && echo "removed $(TARGET)" 
	@rm $(OBJS) -f && echo "removed $(OBJS)"
	@rm -f $(DEPS) && echo "removed $(DEPS)"

# INCLUDE RESOLUTION TARGET
# 1) force generation of dependency listing
depend: $(DEPS)

# DEPENDENCY GENERATION TARGET
# 1) actual generation of dependency listing
# 2) prepending value of OBJ_DIR to each build target
$(DEPS): $(SRCS)
	$(ECHO) "Generating Dependencies for $(BUILD_DIR)/$(TARGET)"
	$(ECHO) "LDFLAGS=[$(LDFLAGS)]"
	$(ECHO) "CFLAGS=[$(CFLAGS)]"
	$(ECHO) "SRC_DIR=[$(SRC_DIR)]"
	$(ECHO) "BUILD_DIR=[$(BUILD_DIR)]"
	$(ECHO) "OBJ_DIR=[$(OBJ_DIR)]"
	$(ECHO) "TARGET=[$(TARGET)]"
	@![ -d $(OBJ_DIR) ] && mkdir $(OBJ_DIR) 
ifndef RELEASE
		$(ECHO) "Debug Build on " `date`
else
		$(ECHO) "Release Build on " `date`
endif
	$(CC) -MM $(CFLAGS) $(SRCS) | sed -e "s:^\([A-Z]\):$(OBJ_DIR)/\1:" > $(DEPS)

-include $(DEPS)

# INSTALL TARGET (requires root access)
# 1) copy console tools to final destination
# 2) chmod target to final permisions
install:
	@! ( $(INSTALL) $(INSTALL_PERM) $(BUILD_DIR)/$(TARGET) $(INSTALL_DIR) ) || echo "$(TARGET) is installed"

