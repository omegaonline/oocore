#///////////////////////////////////////////////////////////////////////////////////
#//
#// Copyright (C) 2008 Jamal M. Natour
#//
#// This file is part of the OmegaOnline  package.
#//
#// It is free software: you can redistribute it and/or modify
#// it under the terms of the GNU Lesser General Public License as published by
#// the Free Software Foundation, either version 3 of the License, or
#// (at your option) any later version.
#//
#//  is distributed in the hope that it will be useful,
#// but WITHOUT ANY WARRANTY; without even the implied warranty of
#// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#// GNU Lesser General Public License for more details.
#//
#// You should have received a copy of the GNU Lesser General Public License
#// along with this file.  If not, see <http://www.gnu.org/licenses/>.
#//
#///////////////////////////////////////////////////////////////////////////////////
TEST_LDFLAGS := -L$(BUILD_DIR)

ifdef USE_LIB_OOCORE
LDFLAGS := $(LDFLAGS) -lOOCore
endif

ifdef USE_LIB_UTIL
LDFLAGS := $(LDFLAGS) -lUtility
endif

ifdef EXTRA_LIBS
LDFLAGS := $(LDFLAGS) $(EXTRA_LIBS)
endif


ifdef BUILDING_LIB

ifndef RELEASE
TARGET	:= $(subst .so,d.so,$(TARGET))
LDFLAGS := $(subst OOCore,OOCored,$(LDFLAGS))
endif

TEST_LDFLAGS := $(TEST_LDFLAGS) -l$(subst lib,,$(subst .so,,$(TARGET)))
CFLAGS := -fPIC $(CFLAGS)
CPPFLAGS := -fPIC $(CPPFLAGS)

else
INSTALL_DIR  := /usr/local/bin
endif

CFLAGS	     := $(CFLAGS) $(BUILD_DEFS)
TEST_CFLAGS  := $(TEST_CFLAGS) -g $(TEST_DEFS)
CPPFLAGS     := $(CPPFLAGS) $(BUILD_DEFS)
TEST_CPPFLAGS:= $(TEST_CPPFLAGS) -g $(TEST_DEFS)
LDFLAGS	     := -L$(OBJ_DIR) -L$(INSTALL_ROOT)/lib -L$(BUILD_DIR) $(EXTRA_LIBS) $(LDFLAGS)
DEP_FLAGS    := BUILD_DIR=$(BUILD_DIR) RELEASE=1

C_SRCS       := $(filter %.c,$(SRCS))
CPP_SRCS     := $(filter %.cpp,$(SRCS))
C_TEST_SRCS  := $(filter %.c,$(TEST_SRCS))
CPP_TEST_SRCS:= $(filter %.cpp,$(TEST_SRCS))

C_OBJS	     := $(subst $(SRC_DIR), $(OBJ_DIR),$(subst .c,.o,$(C_SRCS)))
CPP_OBJS     := $(subst $(SRC_DIR), $(OBJ_DIR),$(subst .cpp,.o,$(CPP_SRCS)))
C_TEST_OBJS  := $(subst $(TEST_DIR), $(OBJ_DIR),$(subst .c,.o,$(C_TEST_SRCS)))
CPP_TEST_OBJS:= $(subst $(TEST_DIR), $(OBJ_DIR),$(subst .cpp,.o,$(CPP_TEST_SRCS)))

OBJS 	     := $(C_OBJS) $(CPP_OBJS) 
TEST_OBJS    := $(C_TEST_OBJS) $(CPP_TEST_OBJS) 
TEST_TARGETS :=	$(subst $(OBJ_DIR), $(BUILD_DIR),$(subst .o,, $(TEST_OBJS)))

first: depend build test
build: .phony $(OBJS) $(BUILD_DIR)/$(TARGET)

# checkout sources here
preq: .phony 

test: .phony $(TEST_OBJS)
ifdef TEST_SRCS	
	for f in $(C_TEST_OBJS) ; 				\
	do							\
		$(CC) $(TEST_CFLAGS) $$f $(TEST_LDFLAGS) -o $(shell $(ECHO) $$f |$(SED) -e "s:\$(OBJ_DIR):\$(BUILD_DIR):" -e "s:\.o::") ; \
	done 
	for f in $(CPP_TEST_OBJS) ; 				\
	do							\
		$(CXX) $(TEST_CPPFLAGS) $$f $(TEST_LDFLAGS) -o $(shell $(ECHO) $$f |$(SED) -e "s:\$(OBJ_DIR):\$(BUILD_DIR):" -e "s:\.o::") ; \
	done
endif
.phony:
	@ $(TOUCH) .phony
	@ - $(RM) .phony


run-test: test $(BUILD_DIR)/$(TARGET)
	$(TEST_INVOKE)

depend: preq
# DEPENDENCY GENERATION TARGET
# 1) actual generation of dependency listing
# 2) prepending value of OBJ_DIR to each build target
	@ $(ECHO) "entering depend"
ifndef BUILD_DIR
	@ $(ECHO) "BUILD_DIR is unset"
	@ false
endif
ifndef CFLAGS
	@ $(ECHO) "CFLAGS is unset"
	@ false
endif
ifndef SRC_DIR
	@ $(ECHO) "SRC_DIR is unset"
	@ false
endif
ifndef BUILD_DIR
	@ $(ECHO) "BUILD_DIR is unset"
	@ false
endif
ifndef OBJ_DIR
	@ $(ECHO) "OBJ_DIR is unset"
	@ false
endif
ifndef OBJS
	@ $(ECHO) "OBJS is unset"
	@ false
endif
ifndef TARGET
	@ $(ECHO) "TARGET is unset"
	@ false
endif

ifdef VERBOSE
	@ $(ECHO) "Generating Dependencies for $(BUILD_DIR)/$(TARGET)"
	@ $(ECHO) "LDFLAGS=[$(LDFLAGS)]"
	@ $(ECHO) "TEST_LDFLAGS=[$(TEST_LDFLAGS)]"
	@ $(ECHO) "CPPFLAGS=[$(CPPFLAGS)]"
	@ $(ECHO) "CFLAGS=[$(CFLAGS)]"
	@ $(ECHO) "SRC_DIR=[$(SRC_DIR)]"
	@ $(ECHO) "SRCS=[$(SRCS)]"
	@ $(ECHO) "C_SRCS=[$(C_SRCS)]"
	@ $(ECHO) "CPP_SRCS=[$(CPP_SRCS)]"
	@ $(ECHO) "OBJS=[$(OBJS)]"
	@ $(ECHO) "DEPS=[$(DEPS)]"
	@ $(ECHO) "BUILD_ROOT=[$(BUILD_ROOT)]"
	@ $(ECHO) "BUILD_DIR=[$(BUILD_DIR)]"
	@ $(ECHO) "OBJ_DIR=[$(OBJ_DIR)]"
	@ $(ECHO) "TARGET=[$(TARGET)]"
	@ $(ECHO) "TEST TARGETS=[$(TEST_TARGETS)]"
endif
	@- [ -d "$(BUILD_DIR)" ] || $(MKDIR) -p $(BUILD_DIR) && $(ECHO) "created $(BUILD_DIR)"
	@- [ -d "$(OBJ_DIR)" ]   || $(MKDIR) $(OBJ_DIR) && $(ECHO) "created $(OBJ_DIR)"
	@ $(ECHO) "$(BUILD_TYPE) on :" $(shell $(DATE) +"%F %T ") "Version: $(BUILD_DATE)" 
	$(RM) $(DEPS)
	$(TOUCH) $(DEPS)
ifdef C_SRCS
	@ $(CC) -MM $(CFLAGS) $(C_SRCS) $(PRIVATE_HDRS)  $(HDRS) $(C_TEST_SRCS) >> $(DEPS)
endif
ifdef CPPFLAGS
	@ $(CXX) -MM $(CPPFLAGS) $(CPP_SRCS) $(PRIVATE_HDRS)  $(HDRS) $(CPP_TEST_SRCS) >> $(DEPS)
endif

	@ $(ECHO) "leaving  depend\n"

distclean: .phony clean
	$(RM) -rvf $(BUILD_ROOT)/build

clean:	.phony 
	$(RM) -rvf $(OBJ_DIR)

$(BUILD_DIR)/$(TARGET): depend $(OBJS)
ifdef BUILDING_LIB
	$(CC) -shared $(OBJS) -Wl $(LDFLAGS) -o $(BUILD_DIR)/$(TARGET)
else
	$(CC) $(OBJS) $(LDFLAGS) -o $(BUILD_DIR)/$(TARGET)
endif
	$(RM) $(DEPS)
# INSTALL TARGET (requires root access)
# 1) copy target to final destination
# 2) chmod target to final permisions
install: .phony build
	@ $(ECHO) "entering install"
	! ( $(INSTALL) $(INSTALL_PERM) $(BUILD_DIR)/$(TARGET) $(INSTALL_DIR) ) || $(ECHO) "$(TARGET) is installed"
ifdef BUILDING_LIB	
ifdef OOCORE_INSTALL
	$(MKDIR) $(INSTALL_HDR_DIR)/OOCore
	$(MKDIR) $(INSTALL_HDR_DIR)/OTL
	! ( $(INSTALL) $(INSTALL_PERM) $(BUILD_ROOT)/include/OOCore/*.h $(INSTALL_HDR_DIR)/OOCore ) || $(ECHO) "OOCore headers installed"
	! ( $(INSTALL) $(INSTALL_PERM) $(BUILD_ROOT)/include/OTL/*.h $(INSTALL_HDR_DIR)/OTL ) || $(ECHO) "OTL headers installed"
endif	
ifdef HDRS
	! ( $(INSTALL) $(INSTALL_PERM) $(HDRS) $(INSTALL_HDR_DIR ) || $(ECHO) "Other headers installed"
endif
# UNINSTALL TARGET (requires root access)
endif
	@ $(ECHO) "leaving  install\n"

# 1) copy target to final destination
# 2) chmod target to final permisions
uninstall: .phony
	@ $(ECHO) "entering uninstall\n"
	$(RM) $(INSTALL_DIR)/$(TARGET)
ifdef BUILDING_LIB	
	$(RM) $(INSTALL_HDR_DIR)/$(HDRS)
ifdef OOCORE_INSTALL
	$(RM) -rvf $(INSTALL_HDR_DIR)/OOCore ) || $(ECHO) "OOCore headers removed"
	$(RM) -rvf $(INSTALL_HDR_DIR)/OTL ) || $(ECHO) "OOCore headers removed"
endif
endif
	@ $(ECHO) "leaving  uninstall\n"

all:	clean depend $(BUILD_DIR)/$(TARGET) test
tall:	all run-test
#########################################
# Build Directory Rules
#########################################
$(OBJ_DIR)/%.o : $(SRC_DIR)/%.cpp
	 $(CC) -c $< $(CPPFLAGS) -o $@ 

# magic to allow parallel build directories
$(OBJ_DIR)/%.o : $(TEST_DIR)/%.cpp
	 $(CC) -c $< $(TEST_CPPFLAGS) -o  $@ 
#########################################
$(OBJ_DIR)/%.o : $(SRC_DIR)/%.c
	 $(CC) -c $< $(CFLAGS) -o $@ 

# magic to allow parallel build directories
$(OBJ_DIR)/%.o : $(TEST_DIR)/%.c
	 $(CC) -c $< $(TEST_CFLAGS) -o  $@ 
#########################################
vpath %.c $(SRC_DIR)
vpath %.cpp $(SRC_DIR)
vpath %.o $(OBJ_DIR)
vpath %.so $(BUILD_DIR)
vpath %$(DEPS) $(OBJ_DIR)

-include $(DEPS)

