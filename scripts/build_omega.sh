#///////////////////////////////////////////////////////////////////////////////////
#//
#// Copyright (C) 2008 Jamal M. Natour
#//
#// This file is part of the OmegaOnline  package.
#//
#// It is free software: you can redistribute it and/or modify
#// it under the terms of the GNU Lesser General Public License as published by
#// the Free Software Foundation, either version 3 of the License, or
#// (at your option) any later version.
#//
#//  is distributed in the hope that it will be useful,
#// but WITHOUT ANY WARRANTY; without even the implied warranty of
#// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#// GNU Lesser General Public License for more details.
#//
#// You should have received a copy of the GNU Lesser General Public License
#// along with this file.  If not, see <http://www.gnu.org/licenses/>.
#//
#///////////////////////////////////////////////////////////////////////////////////
#!/bin/sh
work_dir_set()
{

	if [ $TOP_SRC_DIR"" == "" ] ;
	then
		printf "%b\n" "TOP_SRC_DIR is unset" ;
	return `false`;
	fi
		if [ $ENV_DIR"" == "" ] ;
	then
		printf "%b\n" "ENV_DIR is unset" ;
	return `false`;
	fi
		printf  "%b\n"   "TOP_SRC_DIR=[$TOP_SRC_DIR]" ;
	printf   "%b\n"  "ENV_DIR=[$ENV_DIR]" ;
	return `true`
}

make_project()
{
	project=$1;
	shift;
	{                  			\
		cd $TOP_SRC_DIR;  		\
		make -f makefiles/$project.mk   \
		TOP_SRC_DIR="$TOP_SRC_DIR"     	\
		ENV_DIR="$ENV_DIR"         	\
		$RELEASE_FLAG             	\
		$VERBOSE_FLAG             	\
			$@ ;                	\
	};
}

regen_config_script()
{
	{    
		cd $TOP_SRC_DIR;     \
		scripts/autogen.sh ;       \
	} ;
}
configure_build()
{
	{    
		cd $TOP_SRC_DIR;             		\
		[ -d $TOP_SRC_DIR/build ] || 		\
			mkdir $TOP_SRC_DIR/build; 	\
		./configure $@;  \
	} ;
	return `true`;
}

reconf()
{
	{    
		cd $TOP_SRC_DIR;             		\
		[ -d $TOP_SRC_DIR/build ] || 		\
			mkdir $TOP_SRC_DIR/build; 	\
		scripts/autogen.sh ;       \
		./configure $@;  \
	} ;
	return `true`;
}

make_all()
{
	for project in  "OOCore" "OOSvrUsr" "OOServer" ; 
	do
		make_project $project  $*  || exit $?;
	done
}

clean_all()
{
	[ -d $TOP_SRC_DIR/build ] && rm $TOP_SRC_DIR/build -rf ;
	rm ${TOP_SRC_DIR}/Makefile -f;
	rm ${TOP_SRC_DIR}/Makefile.in -f;
	rm ${TOP_SRC_DIR}/configure.ac -f;
	rm ${TOP_SRC_DIR}/configure -f;
	rm ${TOP_SRC_DIR}/config.log -f;
	rm ${TOP_SRC_DIR}/config.status -f;
	rm ${TOP_SRC_DIR}/aclocal.m4 -f;
	rm ${TOP_SRC_DIR}/autom4te.cache -fr;
}

show_help()
{
	printf "%b\n" "[ Targets ]"
	printf "\t%b\n" "all       clean then regen then conf then build everything"
	printf "\t%b\n" "clean     remove *all* autogenerated files."
	printf "\t%b\n" "oocore    build the core. [ Has Subtargets ]"
	printf "\t%b\n" "ooserver     build the server.[ Has Subtargets ]"
	printf "\t%b\n" "oouser     build the server user.[ Has Subtargets ]"
	printf "\t%b\n" "regen     regenerate the configure script."
	printf "\t%b\n" "conf     configure Omega for your system."
	printf "\t%b\n" "conf     configure Omega for your system."


	printf "%b\n" "[ Option ]"
	printf "\t%b\n" "--verbose (-v)"
	printf "\t%b\n" "--release (-r)"
	printf "\t%b\n" "[-vr|-rv] selects both verbose and release"

	printf "\n%b\n" "[ Subtargets]"
	printf "\t%b\n" "clean\tclean the subproject"
	printf "\t%b\n" "build\tbuild the subproject"
	printf "\t%b\n" "install\tclean the subproject"
	printf "\t%b\n" "depend\tinstall the subproject"
	printf "\t%b\n" "test\tbuild tests for subproject"
	printf "\t%b\n" "run-test\trun tests for subproject"
}

# See how we were called.
work_dir_set

# strip out options
case $1 in -vr|-rv|-v|-r|--release|--verbose)
	set -x
	opt=$1;
	shift;
	case $opt in -vr|-rv)
		export VERBOSE_FLAG="VERBOSE=1" 
		export RELEASE_FLAG="RELEASE=1" 
	;;
	-v|--verbose)    export VERBOSE_FLAG="VERBOSE=1" ;;
	-r|--release)    export RELEASE_FLAG="RELEASE=1" ;;
	esac
esac

target=$1;
shift;
case $target in
# build all the sub projects
	clean|distclean) 		
		clean_all
	;;
	regen|reconfigure) 	
		regen_config_script
	;;
	configure|conf) 		
		configure_build 
	;;
	help)
		show_help
	;;
	reconf)
		reconf
	;;
	all|tall)
		clean_all
		reconf
		make_all $target $* 
	;;
	build|depend|install|uninstall)
		make_all $target   $* 
	;;

# build the core
	oocore|ooserver|oouser|core|server|user)
		case $target in 
			oocore|core)      make_project "OOCore"     $* ;;
# build the sandbox process
			oouser|user)      make_project "OOSvrUsr"   $* ;;
			ooserver|server) make_project "OOServer"   $* ;;
# build the server process
		esac
	;;
	*)
		printf  "%b\n" "Usage: `basename $0`  [Options] Target [Subtargets]"
		printf  "%b\n" "'build_omega.sh help' for more details."
	;;
esac

exit $?
